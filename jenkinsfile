pipeline{
    agent any
    environment{
        VERSION = "${env.BUILD_ID}"
    }
    stages{
        stage("Sonar Quality Check"){
            agent {
                docker{
                    image 'openjdk:11'
                }
            }
            steps{
                script{
                    withSonarQubeEnv(credentialsId: 'sonar-token') {
                        sh 'chmod +x gradlew'
                        sh './gradlew sonarqube'
                    }
                    // timeout(time: 1, unit: 'HOURS') {
                    //     def qg = waitForQualityGate()
                    //     if(qg.status !='OK'){
                    //     error "build failed due to quality gate failed: ${qg.status}"
                    //     }
                    // }
                }
             }

        }
        stage("Docker build & docker push"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'nexus_pass', variable: 'nexus_password')]) {  
                    sh '''
                     docker build -t 34.125.51.149:8082/appdata:${VERSION} .
                    //  docker login -u admin -p $nexus_password 34.125.51.149:8082
                    //  docker push 34.125.51.149:8082/appdata:${VERSION}
                    //  docker rmi 34.125.51.149:8082/appdata:${VERSION}
                    '''
                   }
                }
            }

        }
        stage("Identify Misconfig using Datree in Helms chart"){
            steps{
                script{
                    dir('/kubernetes') {
                     sh 'helm datree test myapp/'
                   }
                }
            }
        }
     }
}